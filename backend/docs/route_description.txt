Route description overview
==========================

Documentation routes (src/documentation/router.py)
--------------------------------------------------
- POST /documentation/ (upload_documentation) – Admin-only upload that validates PDF content, stores it in S3 via upload_to_s3, and persists LawDocumentation records. Raises DocumentationForbidden, DocumentationInvalidFile, and DocumentationUploadFailed when permissions or file checks fail.
- GET /documentation/ (list_documentation) – Returns every document with presigned URLs generated by generate_document_url.
- GET /documentation/{document_id} (get_documentation) – Retrieves single document metadata or raises DocumentationNotFound.
- PATCH /documentation/{document_id} (update_documentation) – Admin-only update that can rename or replace the PDF, cleaning up old S3 keys. Uses DocumentationInvalidFile, DocumentationUploadFailed, and DocumentationNotFound for validation.
- DELETE /documentation/{document_id} (delete_documentation) – Admin-only delete that removes database records and underlying S3 object, raising DocumentationDeletionFailed if storage cleanup fails.

Authentication routes (src/auth/router.py)
-----------------------------------------
- POST /auth/login (login) – Accepts OAuth2 form credentials, normalises the email, verifies the password against User.hashed_password, then returns freshly minted access/refresh JWTs. Emits UserNotFound or InvalidPassword for bad credentials.
- POST /auth/refresh (refresh_token) – Accepts a refresh token string, decodes it, ensures the JWT carries the "refresh" type claim, and issues a new access token. Invalid or expired tokens bubble up as InvalidToken or NotAuthenticated responses.

User routes (src/user/router.py)
-------------------------------
- POST /users/register (register) – Creates baseline client accounts after enforcing unique email checks and hashing the stored password. The resulting User row is returned with default CLIENT role and verified email flags.
- GET /users/me (get_user) – Returns the authenticated User model, leveraging get_current_user to enforce login.
- PUT /users/update (update_user) – Allows authenticated users to modify their profile (username, contact info, password). Passwords are re-hashed before storage; missing accounts raise UserNotFound.
- PATCH /users/{user_id}/role (update_user_role) – Admin-only path that promotes a CLIENT to LAWYER. Guards against non-admin callers, invalid transitions, and absent targets with UnauthorizedRoleUpdate, InvalidRoleTransition, or UserNotFound.
- POST /users/forget-password (forget_password) – Queues an ARQ job (send_reset_email) with a signed reset token after locating the account by email. Responds with UserNotFound for unknown emails.
- POST /users/reset-password (reset_password) – Validates matching password bodies, decodes the provided token via verify_reset_token, then updates the hashed password. Invalid tokens or mismatched confirmations surface InvalidPasswordMatch or UserNotFound.

Booking routes (src/booking/router.py)
-------------------------------------
- Schedule management: create_schedule_slot, list_my_schedule, list_public_schedule, update_schedule_slot, delete_schedule_slot coordinate LawyerScheduleSlot records while preventing overlaps (ScheduleConflict) and enforcing ownership (BookingForbidden).
- Booking requests: create_booking_request enforces client role, validates desired time with find_available_slot, uploads optional attachments, and reserves slots. list_my_requests/list_incoming_requests provide visibility. get_booking_request validates access. decide_booking_request allows lawyers to accept/decline, raising BookingAlreadyReviewed or ScheduleAlreadyBooked when appropriate and creating CaseHistory entries on acceptance.
- Case history: list_my_cases/get_case_history expose CaseHistory data. update_case_history lets lawyers edit titles/descriptions and close cases (CaseStateUpdateForbidden ensures only COMPLETED/CANCELLED). update_case_notes restricts note editing to the owning party. add_case_attachment uploads extra files to S3 via upload_attachment, raising AttachmentUploadFailed/InvalidBookingPayload on failure.
- Ratings: rate_case allows clients to submit 1-5 star ratings after completion (RatingNotAllowed/RatingAlreadySubmitted/RatingInvalidStars protect rules) while get_case_rating returns the stored rating to authorised participants.

Shared utilities and exception handling
---------------------------------------
- src/booking/utils.py centralises S3 helpers, availability checks (slot_overlaps/find_available_slot), and rating aggregation (calculate_lawyer_rating). These helpers are referenced throughout booking routes and by src/lawyer/router.py to surface average ratings.
- src/documentation/utils.py mirrors S3 helpers dedicated to documentation uploads.
- Exceptions are defined per module (src/documentation/exceptions.py and src/booking/exceptions.py) and raised directly when validation, authorisation, or storage requirements are breached, yielding FastAPI HTTP responses with the appropriate status codes.

Lawyer profile rating integration
---------------------------------
- src/lawyer/router.py now calls calculate_lawyer_rating when building LawyerProfileResponse so public and private lawyer profile endpoints surface the averaged client feedback collected from completed cases.

Lawyer verification and profile routes (src/lawyer/router.py)
------------------------------------------------------------
- POST /lawyer/verification-requests (create_lawyer_verification_request) – Clients upload identity, education, and credential PDFs/images plus experience metadata. Files are streamed to S3 under per-user keys; duplicate pending submissions raise RequestAlreadyExists. Upload failures trigger cleanup via RequestUploadFailed.
- GET /lawyer/verification-requests/me (list_my_lawyer_verification_requests) – Clients retrieve their past submissions in reverse chronological order with status snapshots.
- GET /lawyer/verification-requests (list_lawyer_verification_requests) – Admin view (optional status filter) of all requests. Non-admin callers receive RequestForbidden.
- GET /lawyer/verification-requests/{request_id} (get_lawyer_verification_request) – Admins can view any request; clients see only their own. Responses expand to include signed S3 URLs for each stored document.
- PATCH /lawyer/verification-requests/{request_id}/approve (approve_lawyer_verification_request) – Admin action that transitions a pending request to APPROVED, promotes the user to LAWYER, and creates or updates the LawyerProfile with request metadata.
- PATCH /lawyer/verification-requests/{request_id}/reject (reject_lawyer_verification_request) – Admin-only rejection that stores the reason, timestamps the decision, and leaves the user's role unchanged.
- POST /lawyer/lawyers/{lawyer_id}/revoke (revoke_lawyer_role) – Admin endpoint to demote a lawyer back to CLIENT, persist a LawyerRoleRevocation entry, flag all related requests as REVOKED, and purge verification documents and LawyerProfile rows.
- GET /lawyer/profiles/{lawyer_id} (get_public_lawyer_profile) – Public fetch of a lawyer's profile (must still hold LAWYER role), augmented with averaged ratings from booking cases.
- GET /lawyer/profile/me (get_my_lawyer_profile) – Authenticated lawyers receive their own profile detail including aggregated rating. LawyerProfileForbidden arises for non-lawyers or missing profiles.
- PATCH /lawyer/profile/me (update_my_lawyer_profile) – Lawyer self-service profile edits (contact info, languages, education). Validates non-empty strings and language lists; sanitised data is persisted to LawyerProfile.

Chat routes and websocket (src/chat/router.py)
---------------------------------------------
- GET /chat/health (chat_health) – Lightweight status with a count of online websocket users via the shared connection manager.
- POST /chat/conversations (create_conversation) – Ensures the recipient exists and no self-conversation occurs; either returns a cached thread or creates ChatConversation plus two ChatParticipant rows.
- GET /chat/conversations (list_conversations) – Lists all conversations the user participates in, including participants and the latest message metadata ordered by recent activity.
- GET /chat/conversations/{conversation_id}/messages (list_messages) – Fetches paginated history (up to 100 messages, optional cursor) after verifying membership. Marks newly delivered messages and broadcasts delivery receipts via websocket.
- POST /chat/conversations/{conversation_id}/messages (send_message) – Persists a text-only message after rate limiting, trims content, and fan-outs realtime updates to other participants.
- POST /chat/messages/{message_id}/ack (acknowledge_message) – Updates delivery/read receipts for a message (DELIVERED or READ) and broadcasts status to the conversation membership.
- POST /chat/conversations/{conversation_id}/attachments (upload_attachment) – Accepts optional caption plus file uploads, enforces size and content-type restrictions, stores the binary in S3, and emits a message referencing the attachment URL.
- WEBSOCKET /chat/ws (websocket_endpoint) – Authenticates via JWT token query param, registers presence, streams incoming events, and supports text messaging, typing indicators, and ack updates in realtime. Disconnects trigger offline presence broadcasts.

Legal AI routes (src/legal_ai/router.py)
---------------------------------------
- POST /legal-ai/query (query_legal_ai) – Authenticated question endpoint that forwards the request to LegalChatbotService, logging user/session context and returning an answer plus metadata.
- GET /legal-ai/health (legal_ai_health) – Service health probe exposing the configured model id and dataset load status from the in-memory knowledge base.