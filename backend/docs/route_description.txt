Route description overview
==========================

Documentation routes (src/documentation/router.py)
--------------------------------------------------
- POST /documentation/ (upload_documentation) – Admin-only upload that validates PDF content, stores it in S3 via upload_to_s3, and persists LawDocumentation records. Raises DocumentationForbidden, DocumentationInvalidFile, and DocumentationUploadFailed when permissions or file checks fail.
- GET /documentation/ (list_documentation) – Returns every document with presigned URLs generated by generate_document_url.
- GET /documentation/{document_id} (get_documentation) – Retrieves single document metadata or raises DocumentationNotFound.
- PATCH /documentation/{document_id} (update_documentation) – Admin-only update that can rename or replace the PDF, cleaning up old S3 keys. Uses DocumentationInvalidFile, DocumentationUploadFailed, and DocumentationNotFound for validation.
- DELETE /documentation/{document_id} (delete_documentation) – Admin-only delete that removes database records and underlying S3 object, raising DocumentationDeletionFailed if storage cleanup fails.

Booking routes (src/booking/router.py)
-------------------------------------
- Schedule management: create_schedule_slot, list_my_schedule, list_public_schedule, update_schedule_slot, delete_schedule_slot coordinate LawyerScheduleSlot records while preventing overlaps (ScheduleConflict) and enforcing ownership (BookingForbidden).
- Booking requests: create_booking_request enforces client role, validates desired time with find_available_slot, uploads optional attachments, and reserves slots. list_my_requests/list_incoming_requests provide visibility. get_booking_request validates access. decide_booking_request allows lawyers to accept/decline, raising BookingAlreadyReviewed or ScheduleAlreadyBooked when appropriate and creating CaseHistory entries on acceptance.
- Case history: list_my_cases/get_case_history expose CaseHistory data. update_case_history lets lawyers edit titles/descriptions and close cases (CaseStateUpdateForbidden ensures only COMPLETED/CANCELLED). update_case_notes restricts note editing to the owning party. add_case_attachment uploads extra files to S3 via upload_attachment, raising AttachmentUploadFailed/InvalidBookingPayload on failure.
- Ratings: rate_case allows clients to submit 1-5 star ratings after completion (RatingNotAllowed/RatingAlreadySubmitted/RatingInvalidStars protect rules) while get_case_rating returns the stored rating to authorised participants.

Shared utilities and exception handling
---------------------------------------
- src/booking/utils.py centralises S3 helpers, availability checks (slot_overlaps/find_available_slot), and rating aggregation (calculate_lawyer_rating). These helpers are referenced throughout booking routes and by src/lawyer/router.py to surface average ratings.
- src/documentation/utils.py mirrors S3 helpers dedicated to documentation uploads.
- Exceptions are defined per module (src/documentation/exceptions.py and src/booking/exceptions.py) and raised directly when validation, authorisation, or storage requirements are breached, yielding FastAPI HTTP responses with the appropriate status codes.

Lawyer profile rating integration
---------------------------------
- src/lawyer/router.py now calls calculate_lawyer_rating when building LawyerProfileResponse so public and private lawyer profile endpoints surface the averaged client feedback collected from completed cases.